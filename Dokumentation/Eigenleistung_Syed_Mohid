# **Dokumentation der Eigenleistung - Flashcards Webanwendung**
## **1. √úberblick**
Im Rahmen des Moduls Webengineering habe ich gemeinsam mit drei weiteren Kommilitonen eine Flashcards-Webanwendung entwickelt. Ziel des Projekts war es, eine Plattform zu entwickeln, mit der Benutzer Lernkarten (Flashcards) in Form von Decks erstellen, verwalten und lernen k√∂nnen.

Diese Dokumentation beschreibt ausschlie√ülich meine Eigenleistung innerhalb des Gesamtprojekts. Diese umfasst sowohl Frontend-Komponenten als auch vollst√§ndige Backend-Endpunkte zur Verwaltung von Daten.

## **2. Technologien**
- **Frontend:** React mit TypeScript, CSS Modules
- **Backend:** Node.js mit Express, Drizzle ORM, MySQL
## **3. Frontend-Funktionalit√§ten**
### **3.1 Add.tsx - zentrale Steuerung der Komponenten** 
Add.tsx ist die √ºbergeordnete Komponente, die sowohl DeckModal.tsx als auch AddCardForm.tsx integriert und steuert. Sie ist die Hauptseite zum Erstellen neuer Karteikarten und koordiniert die Interaktion zwischen den UI-Komponenten und dem Backend.
#### **Hauptverantwortungen:**
- Verwaltung des aktiven Decks (deckIndex)
- Laden und Aktualisieren aller Decks (√ºber getDecks() aus data.tsx)
- √úbergeben der Callback-Funktion onAddCard an AddCardForm, die dann addCard() ausf√ºhrt
- √ñffnen und Schlie√üen des DeckModal
#### **Ablauf beim Erstellen einer Karte:**
1. Benutzer klickt auf ‚ÄûStapel ausw√§hlen‚Äú ‚Üí √∂ffnet DeckModal
1. Auswahl eines bestehenden Decks oder Eingabe eines neuen Decknamens -deckIndex wird gesetzt
1. Eingabe der Kartendaten in AddCardForm.tsx
1. Beim Klick auf ‚ÄûKarteikarte erstellen‚Äú wird onAddCard() ausgef√ºhrt
1. Die Karte wird per addCard() an das Backend geschickt und gespeichert
1. Das Formular wird geleert und loadDecks() erneut ausgef√ºhrt, um die √Ñnderungen sichtbar zu machen
### **3.2 DeckModal.tsx - Deck ausw√§hlen und hinzuf√ºgen**
Die Komponente DeckModal.tsx erlaubt es Benutzer, ein bestehendes Deck auszuw√§hlen oder ein neues Deck zu erstellen. Sie wird innerhalb von Add.tsx verwendet, wenn der Button "Stapel ausw√§hlen" gedr√ºckt wird.
#### **Aufbau und Ablauf**
1. Beim √ñffnen wird eine Liste aller Decks √ºber die Funktion getDecks() aus data.tsx geladen.
1. Die Decknamen werden gefiltert und im UI gerendert.
1. Ein Klick auf ein Deck setzt den deckIndex, der an Add.tsx √ºbergeben wird.
1. Gibt der Benutzer einen neuen Decknamen ein, wird dieser √ºber addNewDeck() verarbeitet:
   1. Der Name wird gepr√ºft (ob leer oder bereits vorhanden).
   1. Falls g√ºltig, wird im Backend ein neues Deck angelegt (via addDeck() aus data.tsx).
   1. Anschlie√üend wird reloadDecks() aufgerufen, um die UI zu aktualisieren.
#### **Kommunikation:**
- Das Hinzuf√ºgen eines Decks ruft eine POST-Anfrage an den Endpunkt /decks im Backend auf.
- Bei Erfolg wird der neue Deckname lokal gespeichert und angezeigt.
### **3.3 AddCardForm.tsx - Karte zu Deck hinzuf√ºgen**
AddCardForm.tsx stellt ein Formular dar, mit dem man neue Karten (bestehend aus Begriff und Definition) zu einem Deck hinzuf√ºgen kann.
#### **Ablauf:**
1. Benutzer f√ºllt die Felder aus und klickt auf "Karteikarte erstellen"
1. Die Funktion onAddCard wird mit dem neuen Kartendatensatz aufgerufen
1. Diese Funktion (bereitgestellt von Add.tsx) ruft addCard() aus data.tsx auf
1. addCard() sendet eine POST-Anfrage an /cards im Backend
1. Bei Erfolg wird die UI aktualisiert und die neue Karte angezeigt
### **3.4 Login.tsx & LoginComp.tsx**
Diese Komponenten realisieren die Nutzeranmeldung. Die Benutzerdaten (Name + Passwort) werden lokal eingegeben und √ºber getUser() aus data.tsx im Backend abgefragt.
#### ***Ablauf:***
1. Benutzer gibt Name + Passwort ein
1. Die Funktion getUser() ruft den Endpunkt /users/:username auf
1. Das Passwort wird mit bcrypt.compare() validiert
1. Bei Erfolg wird der User redirected zur Startseite
### **3.5 SignupComp.tsx - Registrierung**
Erm√∂glicht neue Benutzerkonten:

- Passwort wird mit bcrypt.hash() verschl√ºsselt
- Neue Benutzer werden via addUser() √ºber POST /users im Backend gespeichert
#### **Validierungen:**
- Doppelte Benutzernamen werden erkannt (via getUser())
- Passwort und Wiederholung m√ºssen √ºbereinstimmen
## **4. Backend-Funktionalit√§t: Delete-Funktionen**
Ich habe zwei vollst√§ndige **DELETE-Funktionen** f√ºr das Projekt umgesetzt:

- **deleteCard** zum Entfernen einzelner Karteikarten
- **deleteDeck** zum L√∂schen eines kompletten Decks

Diese Funktionen bestehen jeweils aus einem Frontend-Aufruf, einer Datenzugriffslogik in data.tsx, einer REST-API-Route im Backend und dem dazugeh√∂rigen Datenbankzugriff via drizzle.
### **4.1 Datenlogik in data.tsx**
In der Datei data.tsx befinden sich die Funktionen:

- deleteCard(cardId: number)
- deleteDeck(deckId: number)

Beide senden einen HTTP-DELETE-Request an das Backend.

### **4.2 Verwendete Routen im Backend**
- üîπ **Deck l√∂schen**:\
  ` `DELETE /decks/:user\_name/:id\
  ` `‚Üí L√∂scht ein Deck anhand von Benutzername und eindeutiger Deck-ID
- üîπ **Karte l√∂schen**:\
  ` `DELETE /cards/:cardid\
  ` `‚Üí Entfernt eine Karte anhand ihrer eindeutigen Karten-ID

Diese Routen sind REST-konform und vermeiden Probleme mit nicht-eindeutigen Namen.
### **4.3 Ablauf beim L√∂schen eines Decks**
1. Der Benutzer klickt in Management.tsx auf ‚ÄûDeck entfernen‚Äú.
1. Die Funktion deleteDeck() wird aufgerufen.
1. Es wird ein DELETE-Request an /decks/:user\_name/:id gesendet.
1. Im Backend wird der Datenbankeintrag per db.delete(decks) gel√∂scht.
### **4.4 Ablauf beim L√∂schen einer Karte**
1. Der Benutzer klickt in Management.tsx auf das Entfernen-Icon einer Karte.
1. Die Karten-ID wird an deleteCard(cardId) √ºbergeben.
1. Diese Funktion sendet einen DELETE-Request an /cards/:cardid.
1. Im Backend wird die Karte mit db.delete(cards) entfernt.
## **5. Einbindung in das Gesamtprojekt**
Meine Komponenten wurden so entwickelt, dass sie klar modular und mit anderen Komponenten kompatibel sind:

- DeckModal kommuniziert mit Add.tsx √ºber Props und Callbacks
- √úber setDeckIndex() wird zentral gesteuert, welches Deck aktiv ist
- AddCardForm wird von Add.tsx und Verwaltung.tsx genutzt

Meine Komponenten sorgen so daf√ºr, dass im gesamten Projekt ein wiederverwendbarer, verst√§ndlicher und wartbarer Aufbau entsteht, der sich problemlos in andere Teile des Systems integrieren l√§sst.
## **6. Codeangabe**
**Frontend:**

- [Add.tsx](https://github.com/mohid-1311/Flashcards/blob/a4604d76c3e4734efca1ceacff3acf857f960e8b/Frontend/src/pages/Add/Add.tsx#L1-L112)
- [Login.tsx](https://github.com/mohid-1311/Flashcards/blob/a4604d76c3e4734efca1ceacff3acf857f960e8b/Frontend/src/pages/Login/Login.tsx#L1-L17)
- [DeckModal.tsx](https://github.com/mohid-1311/Flashcards/blob/a4604d76c3e4734efca1ceacff3acf857f960e8b/Frontend/src/Components/DeckModal/DeckModal.tsx#L1-L124)
- [AddCardToForm.tsx](https://github.com/mohid-1311/Flashcards/blob/a4604d76c3e4734efca1ceacff3acf857f960e8b/Frontend/src/Components/AddCardForm/AddCardForm.tsx#L1-L81)
- [LoginComp.tsx](https://github.com/mohid-1311/Flashcards/blob/a4604d76c3e4734efca1ceacff3acf857f960e8b/Frontend/src/Components/AddCardForm/AddCardForm.tsx#L1-L81)
- [SignupComp.tsx](https://github.com/mohid-1311/Flashcards/blob/a4604d76c3e4734efca1ceacff3acf857f960e8b/Frontend/src/Components/Signup/SignupComp.tsx#L1-L66)

**Backend:**

- [Data.tsx](https://github.com/mohid-1311/Flashcards/blob/a4604d76c3e4734efca1ceacff3acf857f960e8b/Frontend/src/data.tsx#L284-L329) - deleteCard und deleteDeck
- [DeckRouter](https://github.com/mohid-1311/Flashcards/blob/a4604d76c3e4734efca1ceacff3acf857f960e8b/Backend/src/router/deck-router.ts#L99-L120) ‚Äì Delete Endpunkt
- [CardRouter](https://github.com/mohid-1311/Flashcards/blob/a4604d76c3e4734efca1ceacff3acf857f960e8b/Backend/src/router/card-router.ts#L71-L94) ‚Äì Delete Endpunkt
## **7. Fazit**
Durch die Umsetzung der Komponenten und Endpunkte habe ich die vollst√§ndige Funktionalit√§t f√ºr das Erstellen, Anzeigen und L√∂schen von Lerninhalten geschaffen. Besonders wichtig war mir die saubere Trennung von Logik und Darstellung, sowie eine robuste API-Anbindung mit konsistenter Fehlerbehandlung.

Die Aufgaben waren eng mit den Arbeiten meiner Teammitglieder verzahnt. Durch eine gute Absprache bei der API-Gestaltung und der Zust√§ndigkeiten konnten wir die Module klar trennen, aber dennoch effizient zusammenf√ºhren.

Name: Mohid Syed Matrikelnummer: 5415283
